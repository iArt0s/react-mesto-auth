{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this.headers = config.headers;\n  }\n\n  loadUser() {\n    return fetch(`${this._url}users/me/`, {\n      method: \"GET\",\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: \"GET\",\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  }\n\n  updateAvatar(formData) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: formData.avatar\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  }\n\n  updateUserInfo(formData) {\n    console.log(formData);\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: formData.name,\n        about: formData.about,\n        avatar: formData.avatar\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  }\n\n  addCard(formData) {\n    return fetch(`${this._url}cards`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: formData.name,\n        link: formData.link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  }\n\n  likeCard(id) {\n    return fetch(`${this._url}cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  }\n\n  dislikeCard(id) {\n    return fetch(`${this._url}cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  } // changeLikeCardStatus(cardId, isLiked) {\n  //     return fetch(`${this._url}cards/likes/${cardId}`, {\n  //         method: isLiked ? 'PUT' : 'DELETE',\n  //         headers: this._headers\n  //     })\n  //     .then(res => {\n  //       if (res.ok) {\n  //           return res.json();\n  //       }\n  //       return Promise.reject('AAAA,все сломалось!');\n  //   })\n  //  }\n\n\n  removeCard(id) {\n    return fetch(`${this._url}cards/${id}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject('AAAA,все сломалось!');\n    });\n  }\n\n}\n\nexport const api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-20/\",\n  headers: {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"3070922a-3883-4050-b75d-7ef694125bdc\"\n  }\n});","map":{"version":3,"sources":["/Users/arthem/Documents/projects/Yandex/dev/react-mesto/src/utils/api.js"],"names":["Api","constructor","config","_url","url","headers","loadUser","fetch","method","then","res","ok","json","Promise","reject","getInitialCards","updateAvatar","formData","body","JSON","stringify","avatar","updateUserInfo","console","log","name","about","addCard","link","likeCard","id","dislikeCard","removeCard","api"],"mappings":"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","sourcesContent":["class Api {\n  constructor(config) {\n    this._url = config.url\n    this.headers = config.headers;\n  }\n\n  loadUser() {\n    return fetch(`${this._url}users/me/`, {\n      method: \"GET\",\n      headers: this.headers\n    })\n    .then((res)=>{\n\n      if(res.ok) {\n        return res.json()\n      }\n      return Promise.reject('AAAA,все сломалось!');\n    })\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: \"GET\",\n      headers: this.headers\n    })\n    .then((res)=>{\n      if(res.ok) {\n        return res.json()\n      }\n      return Promise.reject('AAAA,все сломалось!');\n    })\n  }\n\n  updateAvatar(formData) {\n    return fetch(`${this._url}users/me/avatar`, {\n        method: 'PATCH',\n        headers: this.headers,\n        body: JSON.stringify({\n            avatar: formData.avatar\n        })\n    })\n    .then(res => {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject('AAAA,все сломалось!');\n    })\n  }\n\n  updateUserInfo(formData) {\n    console.log(formData);\n    return fetch(`${this._url}users/me`, {\n        method: 'PATCH',\n        headers: this.headers,\n        body: JSON.stringify({\n            name: formData.name,\n            about: formData.about,\n            avatar: formData.avatar\n        })\n    })\n    .then(res => {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject('AAAA,все сломалось!');\n    })\n  }\n\n  addCard(formData) {\n    return fetch(`${this._url}cards`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: formData.name,\n        link: formData.link\n      })\n    })\n    .then((res)=>{\n      if(res.ok) {\n        return res.json()\n      }\n      return Promise.reject('AAAA,все сломалось!');\n    })\n  }\n\n  likeCard(id) {\n    return fetch(`${this._url}cards/likes/${id}`, {\n        method: 'PUT',\n        headers: this.headers\n    })\n        .then(res => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject('AAAA,все сломалось!');\n        })\n}\n\n  dislikeCard(id) {\n      return fetch(`${this._url}cards/likes/${id}`, {\n          method: 'DELETE',\n          headers: this.headers\n      })\n          .then(res => {\n              if (res.ok) {\n                  return res.json();\n              }\n              return Promise.reject('AAAA,все сломалось!');\n          })\n  }\n    // changeLikeCardStatus(cardId, isLiked) {\n    //     return fetch(`${this._url}cards/likes/${cardId}`, {\n    //         method: isLiked ? 'PUT' : 'DELETE',\n    //         headers: this._headers\n    //     })\n    //     .then(res => {\n    //       if (res.ok) {\n    //           return res.json();\n    //       }\n    //       return Promise.reject('AAAA,все сломалось!');\n    //   })\n    //  }\n\n  removeCard(id) {\n    return fetch(`${this._url}cards/${id}`, {\n        method: 'DELETE',\n        headers: this.headers\n    })\n    .then(res => {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject('AAAA,все сломалось!');\n    })\n  }\n}\n\nexport const api = new Api ({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-20/\",\n  headers: {\n      \"content-type\": \"application/json\",\n      \"Authorization\" : \"3070922a-3883-4050-b75d-7ef694125bdc\"\n  }\n})\n"]},"metadata":{},"sourceType":"module"}